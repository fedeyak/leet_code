package interesting_problems.dinamic_programming;

// E вас есть набор предметов, каждый из которых имеет определенный вес и стоимость.
// Задача состоит в том, чтобы выбрать некоторые предметы так,
// чтобы их суммарный вес не превышал максимальную вместимость рюкзака,
// а суммарная стоимость была максимальной

public class Knapsack {

    // Метод для решения задачи о рюкзаке
    public static int knapsack(int[] weights, int[] values, int W) {
        int n = weights.length;

        // Создаем таблицу dp размером (n+1) x (W+1)
        int[][] dp = new int[n + 1][W + 1];

        // Заполняем таблицу динамического программирования
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= W; j++) {
                // Если текущий предмет не помещается в рюкзак
                if (weights[i - 1] > j) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    // Выбираем максимальное значение между включением и исключением предмета
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - weights[i - 1]] + values[i - 1]);
                }
            }
        }

        // Возвращаем максимальную стоимость, которую можно получить для вместимости W
        return dp[n][W];
    }

    public static void main(String[] args) {
        // Пример данных
        int[] weights = {2, 3, 4, 5};  // Веса предметов
        int[] values = {3, 4, 5, 6};   // Стоимость предметов
        int W = 5;                     // Максимальная вместимость рюкзака

        // Вызов метода решения задачи
        int maxProfit = knapsack(weights, values, W);

        // Вывод результата
        System.out.println("Максимальная стоимость, которую можно получить: " + maxProfit);
    }
}

